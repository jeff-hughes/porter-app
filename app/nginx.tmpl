server {
    listen 80;
    listen [::]:80 ipv6only=on;
    server_name {{DOMAIN}} www.{{DOMAIN}};

    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

    location / {
        # redirect www to non-www and http to https
        rewrite ^ https://$host$request_uri? permanent;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2 ipv6only=on;
    server_name {{DOMAIN}} www.{{DOMAIN}};

    if ($host = 'www.{{DOMAIN}}') {
        return 301 https://{{DOMAIN}}$request_uri;
    }

    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/{{DOMAIN}}-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN}}-0001/privkey.pem;

    ssl_buffer_size 8k;
    ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_ecdh_curve secp384r1;

    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8;

    # tries to find a file at the location specified, or
    # falls back to the @app location
    location / {
        try_files $uri @app;
    }

    location @app {
        include uwsgi_params;
        uwsgi_pass unix:///tmp/uwsgi.sock;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        # enable strict transport security only if you understand the implications
    }

    location /static {
        alias /app/static;
    }
}
